// Parsing Expression Grammar for RiveScript
// Based on RiveScript 2.00 Working Draft (2009/07/30)
// https://www.rivescript.com/wd/RiveScript

file = { SOI ~ statement+ ~ EOI }
statement = {(block_statement|line_statement)}
block_statement = { (begin_block|topic_block|object_macro) }
line_statement = { (definition|previous|trigger|response) ~ EOL }

// Atoms:
WHITESPACE = _{ " " }
COMMENT    = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | "//" }
continue = _{ NEWLINE ~ "^" }
EOL = { !continue ~ NEWLINE}
txt =  _{ (!EOL) ~ ASCII_ALPHANUMERIC+ }

// Defintions:
definition = { "!" ~ (variable_definition | version_declaration) }
var_type = { ("global" | "var" | "array" | "sub" | "person") }
var_name = { txt }
value    = { (!NEWLINE ~ ANY)* }
version_number      = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+){, 2} }
version_declaration = { "version" ~ "=" ~ version_number }
variable_definition = { var_type ~ var_name ~ "=" ~ value }



// Blocks...
begin_block = { ">" ~ "begin" ~ body ~ "<" ~ "begin" }
topic_block = { ">" ~ "topic" ~ topic_name ~ body ~ "<" ~ "topic" }
object_macro = { ">" ~ "object" ~ object_name ~ object_lang ~ body ~ "<" ~ "object" }
body = { !"<" ~ line_statement* }
object_name  = { txt }
object_lang  = { txt }
topic_name = { txt }



weight = @{ "{weight=" ~ ASCII_DIGIT+ ~ "}" }

trigger_txt         =  { (ASCII_ALPHA_LOWER | ASCII_DIGIT)+ }
optional            =  { "[" ~ value ~ "]" }
array_ref           = ${ "@" ~ txt }
inline_alternatives =  { trigger_txt ~ ("|" ~ trigger_txt)* }
trigger_alternation =  { "(" ~ (array_ref | inline_alternatives) ~ ")" }
wildcard            =  { "*" }
trigger_content     =  { (trigger_txt | trigger_alternation | wildcard | optional)+ }
trigger             =  { "+" ~ trigger_content }

tag              = { "<" ~ (!">" ~ txt) ~ ">" }
response_content = { (txt | tag)+ }
response         = { "-" ~ response_content ~ weight? }


previous = { "%" ~ response_content }
previous = { "%" ~ trigger_content }

operator    = { ("==" | "eq" | "!=" | "ne" | "<>" | "<=" | ">=" | "<" | ">") }
conditional = { "*" ~ (tag | value) ~ operator ~ (tag | value) }
