// Parsing Expression Grammar for RiveScript
// Based on RiveScript 2.00 Working Draft (2013/06/13)
// https://www.rivescript.com/wd/RiveScript

file      = { SOI ~ (statement | blank_line)+ ~ EOI }
statement = { (block | definition) }
block     = { (begin_block | topic_block | object_macro | trigger_response_block) }

// Atoms:
WHITESPACE = _{ " " }
COMMENT    = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ) }
continue   = _{ NEWLINE ~ "^" }
blank_line = _{ NEWLINE }
EOL        = _{ !continue ~ NEWLINE }
special    =  { ("{" | "<" | "//" | "/*") }
txt        = _{ !(EOL | special) ~ ASCII }

// Defintions:
definition          =  { "!" ~ (variable_definition | version_declaration) }
inline_definition   = @{ "{" ~ definition ~ "}" }
var_type            =  { ("global" | "var" | "array" | "sub" | "person") }
var_name            =  { txt }
value               =  { (!NEWLINE ~ ANY)* }
version_number      =  { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+){, 2} }
version_declaration =  { "version" ~ "=" ~ version_number }
variable_definition =  { var_type ~ var_name ~ "=" ~ value }

// Label blocks...
begin_block  = { ">" ~ "begin" ~ body ~ "<" ~ "begin" }
topic_block  = { ">" ~ "topic" ~ topic_name ~ body ~ "<" ~ "topic" }
object_macro = { ">" ~ "object" ~ object_name ~ object_lang ~ body ~ "<" ~ "object" }
body         = { !"<" ~ trigger_response_block* }
object_name  = { txt }
object_lang  = { txt }
topic_name   = { txt }

// Triggers & responses...
trigger_response_block = { trigger ~ continue? ~ (response)+ }

trigger_txt         = _{ !(EOL | special) ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT)+ }
optional            =  { "[" ~ value ~ "]" }
array_ref           = ${ "@" ~ txt }
inline_alternatives =  { trigger_txt ~ ("|" ~ trigger_txt)* }
trigger_alternation =  { "(" ~ (array_ref | inline_alternatives) ~ ")" }
wildcard            =  { ("*" | "_" | "#") }
trigger_content     =  { (trigger_txt | trigger_alternation | wildcard | optional) }
trigger             =  { "+" ~ trigger_content+ ~ EOL }

response_content = { (txt | tag)+ }
response         = { "-" ~ response_content ~ weight? ~ EOL }

previous = { "%" ~ response_content ~ EOL }

operator    = { ("==" | "eq" | "!=" | "ne" | "<>" | "<=" | ">=" | "<" | ">") }
conditional = { "*" ~ (tag | value) ~ operator ~ (tag | value) }

// Tags...
tag = { (variable_tag | template_tag | format_tag) }

template_tag      =  { "<" ~ template_tag_name ~ ">" }
numbered          = _{ ("botstar" | "star" | "input") ~ ASCII_NONZERO_DIGIT? }
template_tag_name =  { (numbered | format_tag_name | "id" | "bot" | "env" | "@") }

operation    = { ("get" | "set" | "add" | "sub" | "mult" | "div") }
variable_tag = { "<" ~ operation ~ " " ~ var_name ~ "=" ~ value ~ ">" }

topic  = @{ "{topic=" ~ ASCII_ALPHANUMERIC+ ~ "}" }
weight = @{ "{weight=" ~ ASCII_DIGIT+ ~ "}" }

format_tag = @{ "{" ~ "/"? ~ format_tag_name ~ "}" }

format_tag_name = { ("random" | "person" | "formal" | "sentence" | "uppercase" | "lowercase") }

ok = { "{ok}" }

escapes = @{ "\\" ~ ("n" | "s" | "/" | "#") }
